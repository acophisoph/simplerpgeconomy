// ======================================================
// UI MANAGEMENT FUNCTIONS
// ======================================================
// (No changes from V4 needed)
const playerInventoryPanel = document.getElementById('playerInventoryPanel'); const playerItemList = document.getElementById('playerItemList'); const playerInvSpace = document.getElementById('playerInvSpace'); const playerGoldDisplay = document.getElementById('playerGoldDisplay'); const npcInteractionPanel = document.getElementById('npcInteractionPanel'); const npcName = document.getElementById('npcName'); const npcOccupation = document.getElementById('npcOccupation'); const npcGold = document.getElementById('npcGold'); const npcInvSpace = document.getElementById('npcInvSpace'); const npcInventoryPanel = document.getElementById('npcInventoryPanel'); const npcItemList = document.getElementById('npcItemList'); const tradePanel = document.getElementById('tradePanel'); const playerSellList = document.getElementById('playerSellList'); const closeNpcPanelBtn = document.getElementById('closeNpcPanelBtnInteraction'); const dialogueBox = document.getElementById('dialogueBox'); const dialogueSpeaker = document.getElementById('dialogueSpeaker'); const dialogueText = document.getElementById('dialogueText');
let dialogueTimeout = null; function showDialogue(speakerName, text, duration = 4000) { if (!dialogueBox || !dialogueSpeaker || !dialogueText) return; dialogueSpeaker.textContent = speakerName; dialogueText.textContent = text; dialogueBox.style.display = 'block'; dialogueBox.style.opacity = '1'; if (dialogueTimeout) clearTimeout(dialogueTimeout); dialogueTimeout = setTimeout(() => { dialogueBox.style.opacity = '0'; setTimeout(() => { dialogueBox.style.display = 'none'; }, 500); }, duration); }
function createInventoryItemHTML(item, priceInfo = null, isBuyButton = false, owner) { const itemConf = ITEMS[item.id]; if (!itemConf) return `<li>Unknown Item: ${item.id}</li>`; let imgHTML = ''; if (USE_SPRITES && ITEM_SPRITES[item.id] && loadedItemSprites[item.id]?.complete && loadedItemSprites[item.id]?.naturalHeight !== 0) { imgHTML = `<img src="${ASSET_BASE_PATH + ITEM_SPRITES[item.id]}" alt="${item.name}" title="${item.name}" width="${ITEM_ICON_SIZE.width}" height="${ITEM_ICON_SIZE.height}">`; } const durabilityHTML = item.durability ? `(${item.durability})` : ''; const quantityHTML = `<span class="item-quantity-durability">x${item.quantity} ${durabilityHTML}</span>`; let priceHTML = ''; if (priceInfo !== null) { priceHTML = `<span class="item-price">(${formatGold(priceInfo)}g)</span>`; } let actionHTML = ''; const targetNpc = player.targetNpc; const inputId = `trade-qty-${isBuyButton ? 'buy' : 'sell'}-${item.id}`; if (targetNpc) { let maxQty = 1; let buttonText = ""; let actionFunc = ""; let canTrade = false; if (isBuyButton) { const sellPrice = calculateSellPrice(targetNpc, item.id); const npcStock = targetNpc.inventory.getItemCount(item.id); const affordableQty = (sellPrice > 0) ? Math.floor(player.money / sellPrice) : npcStock; maxQty = Math.min(npcStock, affordableQty); canTrade = maxQty > 0; buttonText = "Buy"; actionFunc = `player.buyItem(player.targetNpc, '${item.id}', document.getElementById('${inputId}').valueAsNumber)`; } else { const buyPrice = calculateBuyPrice(targetNpc, item.id); const playerStock = player.inventory.getItemCount(item.id); const npcAffordableQty = (buyPrice > 0) ? Math.floor(targetNpc.money / buyPrice) : playerStock; const npcHasSlots = targetNpc.inventory.getTotalSlotsUsed() < targetNpc.inventory.maxSlots; const npcStackSpace = targetNpc.inventory.items[item.id] ? targetNpc.inventory.maxStackSize[item.id] - targetNpc.inventory.getItemCount(item.id) : targetNpc.inventory.maxStackSize[item.id]; const npcCanTakeQty = npcHasSlots ? playerStock : Math.min(playerStock, npcStackSpace); maxQty = Math.min(playerStock, npcAffordableQty, npcCanTakeQty); canTrade = buyPrice > 0 && maxQty > 0; buttonText = `Sell (${formatGold(buyPrice)}g)`; actionFunc = `player.sellItem(player.targetNpc, '${item.id}', document.getElementById('${inputId}').valueAsNumber)`; } if (maxQty > 0) { const initialValue = Math.min(1, maxQty); actionHTML = ` <input type="number" id="${inputId}" min="1" max="${maxQty}" value="${initialValue}" ${!canTrade ? 'disabled' : ''}> <button onclick="${actionFunc}" ${!canTrade ? 'disabled' : ''}>${buttonText}</button> `; } else { actionHTML = `<button disabled>${isBuyButton ? 'Buy' : 'Sell'}</button>`; } } return ` <div class="item-details"> ${imgHTML} <span class="item-name">${item.name}</span> ${quantityHTML} </div> <div class="item-actions"> ${priceHTML} ${actionHTML} </div> `; }
function updatePlayerInventoryUI() { if (!playerInventoryPanel || !playerItemList || !playerInvSpace) return; playerItemList.innerHTML = ''; const items = player.inventory.getSlots(); if (items.length === 0) { playerItemList.innerHTML = '<li>(Inventory Empty)</li>'; } else { items.forEach(item => { const li = document.createElement('li'); let imgHTML = ''; if (USE_SPRITES && ITEM_SPRITES[item.id] && loadedItemSprites[item.id]?.complete && loadedItemSprites[item.id]?.naturalHeight !== 0) { imgHTML = `<img src="${ASSET_BASE_PATH + ITEM_SPRITES[item.id]}" alt="${item.name}" title="${item.name}" width="${ITEM_ICON_SIZE.width}" height="${ITEM_ICON_SIZE.height}">`; } const durabilityHTML = item.durability ? `(${item.durability})` : ''; const quantityHTML = `<span class="item-quantity-durability">x${item.quantity} ${durabilityHTML}</span>`; li.innerHTML = ` <div class="item-details"> ${imgHTML} <span class="item-name">${item.name}</span> ${quantityHTML} </div> <div class="item-actions"> <!-- Player Actions --> </div> `; playerItemList.appendChild(li); }); } playerInvSpace.textContent = `${player.inventory.getTotalSlotsUsed()}/${player.inventory.maxSlots}`; if (player.targetNpc && npcInteractionPanel.style.display !== 'none') { updateNpcInteractionPanel(player.targetNpc); } }
function openNpcInteractionPanel(npc) { if (!npc || !npcInteractionPanel || !npc.occupation) return; player.targetNpc = npc; npcName.textContent = npc.name; npcOccupation.textContent = npc.occupation.name; updateNpcInteractionPanel(npc); npcInteractionPanel.style.display = 'flex'; const greetDialogue = npc.occupation.dialogue?.greet; if (greetDialogue) { showDialogue(npc.name, getRandomDialogue(greetDialogue)); } else { showDialogue(npc.name, "..."); } }
function closeNpcInteractionPanel() { if (!npcInteractionPanel) return; const npc = player.targetNpc; npcInteractionPanel.style.display = 'none'; player.targetNpc = null; if(npc && npc.occupation?.dialogue?.cancel) { showDialogue(npc.name, getRandomDialogue(npc.occupation.dialogue.cancel), 2500); } }
function updateNpcInteractionPanel(npc) { if (!npc || !player.targetNpc || player.targetNpc.id !== npc.id || npcInteractionPanel.style.display === 'none') { if (npcInteractionPanel.style.display !== 'none') { closeNpcInteractionPanel(); } return; } npcGold.textContent = formatGold(npc.money); npcInvSpace.textContent = `${npc.inventory.getTotalSlotsUsed()}/${npc.inventory.maxSlots}`; npcItemList.innerHTML = ''; const npcItems = npc.inventory.getSlots(); if (npcItems.length === 0) { npcItemList.innerHTML = '<li>(Empty)</li>'; } else { let canBuySomething = false; npcItems.forEach(item => { const occupation = npc.occupation; const wantsToSell = occupation.sellPrefs?.includes(item.id) || (occupation.produces?.[item.id]) || (occupation.recipes?.[item.id]); const hasExcess = npc.inventory.getItemCount(item.id) > (occupation.desiredStock?.[item.id] || 1); if (wantsToSell || hasExcess) { const li = document.createElement('li'); const sellPrice = calculateSellPrice(npc, item.id); li.innerHTML = createInventoryItemHTML(item, sellPrice, true, npc); npcItemList.appendChild(li); canBuySomething = true;} }); if(!canBuySomething && npcItems.length > 0) { npcItemList.innerHTML = '<li>(Nothing for sale)</li>'; } } playerSellList.innerHTML = ''; const playerItems = player.inventory.getSlots(); if (playerItems.length === 0) { playerSellList.innerHTML = '<li>(Your inventory is empty)</li>'; } else { let canSellSomething = false; playerItems.forEach(item => { const buyPrice = calculateBuyPrice(npc, item.id); if (buyPrice >= 0) { const li = document.createElement('li'); li.innerHTML = createInventoryItemHTML(item, null, false, player); playerSellList.appendChild(li); if(buyPrice > 0) canSellSomething = true; } }); if(!canSellSomething && playerItems.length > 0) { playerSellList.innerHTML = '<li>(NPC not buying anything you have)</li>'; } } }
function updatePlayerGoldUI() { if (playerGoldDisplay) { playerGoldDisplay.innerHTML = `Player Gold: <span id="playerGold">${formatGold(player.money)}</span>`; } }
if (closeNpcPanelBtn) { closeNpcPanelBtn.addEventListener('click', closeNpcInteractionPanel); } else { console.error("Close button for NPC panel not found!"); } updatePlayerGoldUI();