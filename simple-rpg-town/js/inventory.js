// ======================================================
// INVENTORY MANAGEMENT CLASS
// ======================================================
// (No changes from V4 needed)
class Inventory { constructor(maxSlots = INVENTORY_SLOTS) { this.items = {}; this.maxSlots = maxSlots; this.maxStackSize = {}; Object.keys(ITEMS).forEach(id => { this.maxStackSize[id] = ITEMS[id]?.stackSize || 1; }); } getTotalSlotsUsed() { return Object.keys(this.items).length; } getItemCount(itemId) { return this.items[itemId]?.quantity || 0; } hasItem(itemId, quantity = 1) { return this.getItemCount(itemId) >= quantity; } addItem(itemId, quantity = 1) { const itemInfo = ITEMS[itemId]; if (!itemInfo) { console.warn(`Attempted to add unknown item: ${itemId}`); return 0; } if (quantity <= 0) return 0; const stackSize = this.maxStackSize[itemId]; let addedCount = 0; let remainingQuantity = quantity; if (this.items[itemId]) { const currentQuantity = this.items[itemId].quantity; const canAddToStack = stackSize - currentQuantity; const amountToAdd = Math.min(remainingQuantity, canAddToStack); if (amountToAdd > 0) { this.items[itemId].quantity += amountToAdd; addedCount += amountToAdd; remainingQuantity -= amountToAdd; if (itemInfo.durability) { this.items[itemId].durability = itemInfo.durability; } } } if (remainingQuantity > 0 && !this.items[itemId]) { if (this.getTotalSlotsUsed() < this.maxSlots) { const amountToAdd = Math.min(remainingQuantity, stackSize); if (amountToAdd > 0) { this.items[itemId] = { quantity: amountToAdd }; if (itemInfo.durability) { this.items[itemId].durability = itemInfo.durability; } addedCount += amountToAdd; remainingQuantity -= amountToAdd; } } else { if(addedCount === 0) console.log("Inventory full, cannot add new item type:", itemId); } } if (remainingQuantity > 0 && quantity > addedCount) { /* console.log(`Could only add ${addedCount} of ${quantity} ${itemId}. Stack/Slot limit reached.`); */ } return addedCount; } removeItem(itemId, quantity = 1) { if (!this.items[itemId] || quantity <= 0) { return 0; } const currentQuantity = this.items[itemId].quantity; const amountToRemove = Math.min(quantity, currentQuantity); this.items[itemId].quantity -= amountToRemove; if (this.items[itemId].quantity <= 0) { delete this.items[itemId]; } return amountToRemove; } useTool(itemId) { const itemData = this.items[itemId]; const itemInfo = ITEMS[itemId]; if (!itemData || !itemInfo?.durability) { return false; } if (itemData.durability === undefined) { itemData.durability = itemInfo.durability; } itemData.durability -= 1; if (itemData.durability <= 0) { console.log(`${itemId} broke!`); this.removeItem(itemId, 1); return false; } return true; } getSlots() { return Object.entries(this.items).map(([id, data]) => ({ id: id, name: ITEMS[id]?.name || 'Unknown Item', quantity: data.quantity, durability: data.durability })).sort((a, b) => a.name.localeCompare(b.name)); } }